<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.vue.back.mapper.BoardMapper">

<!--   <resultMap type="com.vue.back.dto.BoardDto" id="board">
  	 이거 만들고 하나더있는게 
  </resultMap> -->
	
  <select id="getBoardType" resultType="com.vue.back.dto.BoardTypeDto">
  	SELECT
  		uid,
  		type,
  		name,
  		created_at as createdAt,
  		updated_at as updatedAt
  	FROM
  		board_type
  	ORDER BY
  		UID 
 	ASC
  </select>
  
  <select id="getBoardList" resultType="com.vue.back.dto.BoardDto">
    SELECT
    	b.uid,
    	b.type,
    	IFNULL(SUM(
    		CASE WHEN good_bad='G' 
    		THEN 1
    		END
    	),0) as good_cnt,
    	IFNULL(SUM(
    		CASE WHEN good_bad='B' 
    		THEN 1
    		END
    	),0) as bad_cnt,
    	b.title,
    	b.created_user,
    	b.view_cnt,
    	b.created_at
 	FROM
 		board b
 	LEFT JOIN
 		good_bad gb
 	ON
 		b.uid = gb.mother_uid
 	LEFT JOIN
 		board_type bt
 	ON
 		b.uid = bt.uid
    WHERE
    	is_del = 0 
    AND
    	b.type = #{type}
	GROUP BY 
		b.uid
	<if test="page == null">
	ORDER BY 
		view_cnt
	LIMIT
		5
	</if>
	<if test="page != null">
		LIMIT
			#{startPage}, #{qty}
	</if>
  </select>   
  
  <select id="getTotalCnt" parameterType="com.vue.back.dto.BoardDto" resultType="int">
  	SELECT
  		count(*)
  	FROM
  		board
  	WHERE
  		1=1
  	AND
  		is_del = 0
  	AND
  		type = #{type}
  </select>
  
  <update id="readViewCnt">
  	UPDATE 
  		board
  	SET
  		view_cnt = view_cnt + 1
  	WHERE
  		uid = #{uid}
  </update>    
  
  <insert id="insertBoard" parameterType="com.vue.back.dto.BoardDto" useGeneratedKeys="true" keyProperty="uid">
  <!-- 그럼 이제 넣기만해면 댐 끝 -->
  	INSERT INTO board(
  		title,
  		type,
  		content,
  		created_user,
  		created_at
  		)
   	VALUES(
   		#{title},
   		#{type},
   		#{content},
   		#{created_user},
   		now()
   		)
  </insert>
  
  <insert id="insertFile" parameterType="com.vue.back.dto.FileDto">
  	INSERT INTO file(
  		mother_uid,
  		file_size,
  		file_name,
  		file_url,
  		created_at
  		)
  	VALUES(
  		#{mother_uid},
  		#{file_size},
  		#{file_name},
  		#{file_url},
  		now()
  	)
  </insert>
  
  <select id="getBoardDetail" parameterType="long" resultType="com.vue.back.dto.BoardDto">	
   	SELECT
   		b.uid,
   		b.title,
   		b.content,
   		b.created_user,
   		b.created_at,
 		b.view_cnt,
 		f.file_url as fileUrl
 	FROM
 		board b
 	LEFT JOIN
 		file f
 	ON
 		b.uid = f.mother_uid
 	WHERE
 		b.uid = #{uid}
  </select>
  
  <select id="getMyBoard" parameterType="com.vue.back.dto.BoardDto" resultType="com.vue.back.dto.BoardDto">
  	SELECT
  		uid,
  		title,
  		content
  	FROM
  		board
  	WHERE
  		uid = #{uid}
  </select>
  
  <select id="getGoodBadBoard" parameterType="com.vue.back.dto.BoardGoodBadDto" resultType="com.vue.back.dto.BoardGoodBadDto">
 	SELECT
  		mother_uid,
  		created_user,
  		good_bad
  	FROM
  		good_bad
  	WHERE
  		mother_uid = #{mother_uid}
  	AND
  		created_user = #{created_user}
  </select>  
  
  <update id="updateGoodBad" parameterType="com.vue.back.dto.BoardGoodBadDto">
  	UPDATE
  		good_bad
  	SET
  		good_bad = #{good_bad},
  		updated_at = now()
  	WHERE
  		mother_uid = #{mother_uid}
  	AND
  		created_user = #{created_user}
  </update>
  
  <insert id="insertGoodBad" parameterType="com.vue.back.dto.BoardGoodBadDto">
  	INSERT INTO	good_bad (
		mother_uid,created_user,good_bad,created_at
  	)
  	VALUES(
  		#{mother_uid},#{created_user},#{good_bad},now()
  	)
  </insert>
  
  <select id="getGoodBadCnt" parameterType="Long" resultType="com.vue.back.dto.BoardGoodBadCntDto">
	SELECT
		count(case when good_bad ='G' then 1 end) as 'good_cnt' ,
		count(case when good_bad ='B' then 1 end) as 'bad_cnt' 
	FROM
		good_bad gb 
	WHERE 
		mother_uid = #{mother_uid}
  </select>
  
  <update id="removeBoard">
  	UPDATE
  		board
  	SET
  		is_del = 1
  	WHERE
  		uid = #{uid}
  </update>
  
  <update id="modifyBoard" parameterType="com.vue.back.dto.BoardModifyDto">
  	UPDATE
  		board
  	SET
  		title = #{title},
  		content = #{content},
  		updated_at = now()
  	WHERE
  		uid = #{uid}
  </update>
  
  
</mapper>